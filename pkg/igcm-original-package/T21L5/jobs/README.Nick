
RUNNING THE SIMPLE GCM - NICK HALL AUGUST 2000

Welcome to my informal guide to this particular implementation of the Reading
Spectral Model. The purpose of this guide is not to explain how the model works,
just to describe its implementation here. You'll also need to read Hoskins and
Simmons QJ 1975, and Mike Blackburn's venerable handwritten documentation to
have a chance of being able to use this thing. You'll also have to get to grips
with either my standalone spectral analysis program, `specan.f', or preferably
the comprehensive Reading diagnostics package `smap' to be able to look at the
output from the model.

This guide will esentially take you step by step through one of my recent job
scripts, which I have retitled DEMO.job. 

But first, a general description of the directory structure. Under the directory
`igcm' there are subdirectories `data', `jobs' and `lib'. `data' contains
initial conditions and forcing functions to make the model behave like a
GCM. `lib' is library routines for linear algebra operations, ffts etc, i.e. all
the things that are not in the core model code. The core model code is contained
in a file called `igcm1.npl' in the `igcm' directory. This core code is
inviolable, and modifications to it are made using a fortran code maintenance
package called `nupdate'. The directory `jobs' contains scripts to run the model
which are essentially lists of nupdate instructions and various instructions to
link files, supply parameters and compile and execute the code.

So lets get straight into a description of the file `DEMO.job' in directory
`jobs/T21L5'. You should have this in front of you now:

The first few lines define working directories. KD is the initials of Kevin
Dunn, the systems administrator in Reading about ten years ago. He has long
since given up scientific computing to become a priest, but his name lives on
and this is the directory where initial data and model files are kept. A KD2 is
defined for convenience. EXPDIR is the directory where you want the model output
to go.  MACHINE defines your platform. I use an SGI, but this code can also make
use of a Sun.  If you want to use something else, good luck. Options for
compiling and running are self evident. EXEC is the path name of the final
executable file you run to execute the model. 

Then we get straight into update directives: i.e. instructions for modifying the
fortran source code.  There is a lot of this, accumulated over the years, all my
own work - nobody at Reading is to blame for this bit. I think so you have a
good overview, you should skip this for the moment, we'll come back to it at the
end, just scroll down until you get to the section called NAMELIST DATA. 

#########################################

The NAMELIST DATA section provides an opportunity for overriding model default
parameters using the fortran namelist function. I'll give a brief discription of
each control parameter listed here. Note that there are more parameteres than
this, for others the default is used automatically since they are not overridden
here. WARNING: some of the `logic' behind some of these logical switches is
rather eccentric. 

KRUN: Length of run in timesteps. Not necessarily the same as the timestep on
which the run ends.

BEGDAY: beginning day

KITS: number if initial short timesteps. must be =0 for the simple GCM.

TSPD: number of timesteps per day.

PNU: leapfrog timescheme filter.

TDISS: timescale for the hyperdiffusion in days.

NDEL: order of diffusion (i.e. power of del operator)

LSHORT: logic switch which supposedly decides whether or not to have short
timesteps but in practice we use this to decide whether it is an initial run or
a restart run.  .T. -> initial, .F. -> restart. This is because we always set
KITS=0., so there are never any short intial timesteps anyway. 

LBALAN: logical switch for balancing in an `initial' run. We always use `restart' runs 
even when we are not restarting, so this issue doesn't arise. Leave it as false. 

LRSTRT: Set this to true. If it is set to false, the model will think that you
either want to balance the initial data, or you want to start from rest ! Unless
you want to do one of these things, tell the model its a restart run, even if it
isn't, then control the logic of whether its a restart run or not using LSHORT,
as described above. 

LRESTIJ: something Ian James did that I never use, set it to False. 

LNOISE: something for noise in the initial condition - I've never used it.

LGPDAMP: the damping I apply can either be done in spectral space or gridpoint
space.  If you want the coefficient to be spatially varying, or nonlinear, you
have to do it in grid space, setting this to .T. (but study the code in
subroutine DGRMLT, theres a limited amount it can do). Otherwise, you can do the
damping in spectral space, avoid a set of transforms and speed up the model
(setting this to .F.).

LFCE: switch to add forcing defined in fortran chanel 13, linked to file
data.fli read into variables ending in FCE. This is normally the `linear model
forcing', i.e. the forcing including transient edy effects (see Hall, 2000).

LFED: switch to add forcing defined in fortran chanel 14, linked to file
data.fed read into variables ending in FED. This is normally the `transient eddy
forcing', and is SUBTRACTED from the linear model forcing to give the GCM
forcing (you really need to see Hall, 2000).

LFAN: if you want to read in a forcing perturbation, like an El Nino heating or
something, do it here. 

LMODE: Don't mess with this. Its to do with Normal mode instability calculations
with a linear model.

LTRAIN: this is a switch that enables the model to be run many times for one
timestep, in order to calculate new forcing functions, or it can be hacked to to
ensemble runs.

RNTAPE: I always set this to 100. It dates back to pre unix days when file
identification was an issue. Still useful to make sure you haven't done
something boneheaded with double precision. 

KOUNTH: how many timesteps do you want between writing out history records.

KOUNTR: how many timesteps do you want between writing out restart records.

+++ blach blah - some other things to do with prited output, cant remmeber what
they do.

RESTIM: a basic timescale in days for the Damping contained in the model.

AA1, AA2, AAT - more damping parameters, to be explained as we go through the
code.

KBAL: - assuming you're balancing initial data, this sets the number of
iterations.

LTBAL: switch to choose type of balancing (if you're doing it), between T,sp ->
Z,D (.T.)  or Z,D -> T,sp (.F.)

##############################################

Having set all these switches and parameters, and defined a file full of update
instructions to modify the code, its time to use nupdate to create a fortran
source file, igcm1.f

This is done with the command nupdate. Note that it reads the file `updates'
which is the list of instructions to modify the code that was created above, and
that we have temporarily glossed over. The executable `nupdate' is in the
directory igcm/jobs/T21L5 for ease of packaging, but you should put it in your
bin directory. Of course it'll only work for an SGI, so of you're using
something else you'll have to find the equivalent.

The f77 compilation is then done, with compilations flags set according to
whether its a Sun or and SGI. It links with library routines in the directory
`lib'.

Then all that's left to do is link fortran files:

INPUT
fort.10             -  the initial condition (a history or restart file)
fort.13 and fort.14 -  two files that contain forcing functions to make the GCM forcing. 
fort.15             -  a perturbation to the forcing
fort.18             -  gridpoint orography data (used only to define daming coeffs)
fort.19             -  gridpoint land-sea mask data (ditto)

OUTPUT
fort.9              -  history file (i.e. output of model state as spectral coeffs)
fort.11             -  restart files written at regular intervals (contains two timesteps
                       so the model can be restarted smoothly from this)
fort.12             -  final restart record, written at the end of the run.
fort.2              -  some written output. Nothing really interesting here, but can 
                       be useful to look at if something goes wrong.

####################################################

finally we run the model with the all important command, $EXEC

####################################################



-------------- NICK'S CODE UPDATES -------------------

Heres the section where you get familiar with all the awful hacking I've done
with this model. Scroll back up to the top (I really ought to put these updates
into a separate file, but what the hell....) and start reading where you see 
cat << /EOF > updates.

A few words on the update language. Basically the lines in the code are numbered
one subroutine at a time. So a line in the main program will be called MLTRI.45,
for example, or in a subroutine it might be called MGRMLT.34 and so on. If you
want to delete one or more of these lines you use *D and then the range of lines
to be deleted and then immediately type the lines that will replace them (if
any).  You can insert without deleting by using *I. Thats about it. To check how
the finished code looks, just look at the file `igcm1.f'. All my updates (new
lines) appear with the identifier `NICK'. 

The first update replaces the main parameter statement of the model, so you can
set the resolution. Some extra namelist variables are then added, declared and
defaults initialised.

Then come the code alterations. This script is taken from the long runs done with 
random forcing perturbations. The random number generator is initialised here. 

Then comes some logic checking that I must have found too restrictive at some
point and commented out. 

Then I initialise three damping parameters, AA1 AA2 and AAT. These are overread
in the namelist. Model variables ending in DMP are initialised to zero. These
are used for general purpose dummy variables. In this job they are used for
accumulating monthly means. 

They are alternatively used for reading in initial data that is to be balanced.

Then comes the part where we decide what to display as the run is progressing.
I usually find it useful to display a spectral coeff of vorticity once a day or
once a month, just to check that its still a number (as opposed to `nan'). 

The code for accumulating monthly means is specific to these really long
runs. The logic is pretty straightforward. Note the WRITE(9) line is where the
model history record is written. 

The model calls SCALEDOWN if LMODE is enabled. This is a subroutine for scaling
perturbations to a predetermined norm for breeding normal modes in unstable
(scales down a growing mode) or stable (scales up a decaying mode) base states.

The next bit is about the vertical scheme. The default vertical scheme is the
Simmons Burridge scheme.  You can put back in the Hoskins and Simmons `T-scheme'
by uncommenting the first set of lines. You can put in my own empirically
derived scheme (specific for this forcing data) by uncommenting the second
set. See Hall (2000) and Hoskins and Simmons 75 for explanations.

Then comes some initialisation subroutines (used be be called by another
subroutine, INITAL, which after some model development didn't do anything else,
so I scrapped it). And some display of matrices that define the vertical scheme.

line 111 marks the start of the training loop (used if LTRAIN is true) where the
model is run repeatedly to calculate forcing functions - in this case 900 times
(reading initial data with 900 records - but in this case LTRAIN is .F. so it
doesn't do it of course).

The model has a split timestep. That means it does a semi implicit timestep for
adiabatic temndencies (the primitive equations) involving a set of spectral
transforms. Gridpoint calculations are done in subroutine MGRMLT. After that the
model calls TSTEP and the tendencies are applied. Then diabatic tendencies are
calculated.  This may or may not involve another set of spectral transfroms
(depending on LGPDAMP) in which gridpoint tendencies are calculated in DGRMLT.
To do this extra set of spectral transforms, some more variables are set up, in
a similar way to the first set of transforms. (The best way to have an
uncluttered idea of how this all works is to look at my program specan.f).  The
further diabatic tendency contributions are calculated in DIFUSE and the
diabatic tendency is applied in DSTEP. Theres an update to DSTEP here to make
sure it treats surface pressure as well as the other three variables. 

Then comes the details of the second set of spectral transforms. Inverse
legendre transfroms are calculated one latitude at a time (actually two
latitudes because it does both hemispheres at once) in LTI(UV). Then fourier
transforms are done with FFT991. Gridpoint caclulationss in DGRMLT. Then fourier
transfrom back. Then direct Legendre transform to spectral space using LTD(UV).

Then comes some pretty unintersting bits to do with reading in the forcing
functions. Quite self evident really.

The land sea mask and gridpoint orography are used to derive normalised damping
parameters (i.e. their global mean is preserved) that depend on geography. This
is only used if LGPDAMP is set, and is controlled by land-sea contrast parameter
AA1 and orographic friction parameter AA2. 

Now we come to the updates to subroutine DIFUSE, where diabatic tendencies are
calculated in spectral space. This is where the method is used, to force the
model to behave like a GCM. Its very simple. Tendencies ZT, DT, TT and VP (of
vort, div, temp and sp) are added to by amounts ZFCE(etc), the `linear model
forcing' (data.fli) i.e. the forcing which includes the transient eddy
frocing. The transient eddy forcing is then subtracted out by subtracting
ZFED(etc) (data.fed).  (because we want the model to do its own transient eddies
- see Hall 2000). This is just my way of defining things, and I only use it this
way because I do a lot of linear runs so I want to keep the flexibility, change
the notation if you wish (just don't screw up any signs!). Finally we add a
forcing perturbation ZFAN (data.fan).

Note that in this script the addition of data from data.fan is commented out.
That's because this script comes from a very simple experiment where only one
coefficient of temperature tendency is treated with a forcing anomaly. This
happens below, where first a red noise coefficient is calculated. The procedure
is to find gaussian white noise by averaging together a lot of random numbers
with a flat distribution and then using autoregression to turn the white noise
into red noise. 

Then comes the damping. The coefficient DAMP is defined according the the
timescale RESTIM set in the namelist. The parameter AAT is also used when 
temperture is damped on a different timescale to momentum. The way this is put
into a profile is pretty self explanitory. Note that since the model works with
absolute vorticity, when you damp the variable Z, you must undo what you did to
the planetary vorticity by undamping EZ in the relevant spectral coefficient.

Some identity damping follows last - for finding time independent linear
solutions (See Hall Derome and Lin).

Phew, we've arrived at the full subroutines. I've already mentioned what they do
and I won't describe them in detail here. They have a few comments anyway. 


############################################################################

FOR COMPLETENESS I APPEND THE FULL JOB SCRIPT HERE

#############################################################################



#! /bin/ksh
set -xve
#-----------------------------------------#
# Run Reading Spectral Model.             #
# 100. climate mode.                      #
# T21L5   ***GLOBAL***                    #
# Read full history initial data.         #
# If training run set LTRAIN=.T. in       #
# namelist and read data.seq into chan 10 #
#-----------------------------------------#
set +v
#
############################################# USER SWITCHES.
#
KD=/usr/people/hall/igcm        # Root path for model files
KD2=/usr/people/hall/igcm/data/T21L5
EXPID=LONGT21L5                 # Experiment identifier.
EXPDIR=/usr/people/hall/$EXPID  # Experiment directory.
MACHINE=sgi                     # (sun/sgi) only
COMPILE=yes                     # Nupdate and compile (yes/no)
RUN=yes                         # run an executable already created
                                # (yes/no)
EXEC=/usr/people/hall/$EXPID/prog  # Full path of the executable 
#                               # either to be created if COMPILE=yes
#                               # or to be run if COMPILE=no
#
############################################# UPDATE DIRECTIVES.
#
[ ! -d $EXPDIR ]   &&   mkdir -p $EXPDIR
#
cat  <<  /EOF  >  updates
*IDENT G100
*D PARAM1.5,6
      PARAMETER(NN=21,MM=21,NHEM=2,NL=5,MOCT=1,MG=64,JG=16,NWJ2=121
     P         ,NCRAY=64,JGL=JG)
*/
*IDENT NICK
*/Add extra namelist variables and for logic control 
*/(in common BLANK and namelist INPRN) extra grid point 
*/damping parameters (in common RESTOR and namelist INPRS)
*/and set defaults.
*I SC970203.1
     +              ,LGPDAMP,LFCE,LFED,LFAN,LLIN,LMODE,LTRAIN,XRED
*I SC970203.2
     +       ,LGPDAMP,LFCE,LFED,LFAN,LLIN,LMODE,LTRAIN
*I SC970203.3
     + ,LGPDAMP,LFCE,LFED,LFAN,LLIN,LMODE,LTRAIN
*D INIRES.11
      NAMELIST/INPRS/ RESTIM,AA1,AA2,AAT
*I SC970203.4
      LNOISE=.FALSE.
      LGPDAMP=.TRUE.
      LFCE=.TRUE.
      LFED=.TRUE.
      LFAN=.FALSE.
      LLIN=.FALSE.
      LMODE=.FALSE.
*I INISET.99
C*****initialise random number generator
      CALL SRAND(53743)
      IX=IRAND()
      CALL SRAND(IX)
      RAN=0.
      XRED=0.
C
C*****check logic of LTRAIN, LFCE, LFED, LFAN and KRUN makes sense 
C     after reading namelists (don't force in a training run 
C     and traiing should be for one timestep only)
C
C     IF (LTRAIN) THEN
C        IF (LFCE) THEN
C        PRINT*,'WARNING - LFCE OVERRIDE TO .FALSE. IN A TRAINING RUN'
C        LFCE=.FALSE.
C        END IF
C        IF (LFED) THEN
C        PRINT*,'WARNING - LFED OVERRIDE TO .FALSE. IN A TRAINING RUN'
C        LFED=.FALSE.
C        END IF
C        IF (LFAN) THEN
C        PRINT*,'WARNING - LFAN OVERRIDE TO .FALSE. IN A TRAINING RUN'
C        LFAN=.FALSE.
C        END IF
C        IF (KRUN.NE.1) THEN
C        PRINT*,'WARNING - KRUN OVERRIDE TO 1 IN A TRAINING RUN'
C        KRUN=1
C        END IF
C     END IF
*I INIRES.13
      AA1=0.
      AA2=0.
      AAT=0.
*/
*/ Initialise DMP arrays and monthly counter
*D BATS.8
     +              ,DELT,DELT2,CV,CG,CT,PNU,PNU2,KDMP
*I INISTR.51
         SPDMP(I)=(0.0,0.0)
*I INISTR.59
         ZDMP(I)=(0.0,0.0)
         DDMP(I)=(0.0,0.0)
         TDMP(I)=(0.0,0.0)
*I INISTR.60
         KDMP=0

*/ Check for specific run identifier on input restart data.
*D INISTR.115
            IF (ABS(100.-RM2TAPE) .GT. 1.0E-03) THEN
*D INISTR.162
            IF (ABS(100.-RM2TAPE) .GT. 1.0E-03) THEN
*I INISTR.156
      PRINT*,'SEARCHING RESTART FILE, DAY = ',DAY,' BEGDAY = ',BEGDAY
*/
*/if balancing initial data, read initial history record into 
*/ZDMP etc and then just copy zonal mean ZDMP into Z
*I INIBAL.12
*CALL RESTOR
*I INIBAL.43
      REWIND(7)
*I INIBAL.59
C*****temporarily use DMP fields to read in initial data to be balanced
            READ(10)RKOUNT,RM1TAPE,DAY,ZDMP,DDMP,TDMP,SPDMP,RM2TAPE
            IF (ABS(RM1TAPE-RM2TAPE) .GT. 1.0E-03) THEN
               PRINT*,'RECORD WRONG LENGTH IN A BALANCING RUN'
               STOP
            ENDIF
            IF (ABS(100.-RM2TAPE) .GT. 1.0E-03) THEN
               PRINT*,'RECORD IDENTIFIER WRONG IN A BALANCING RUN'
               STOP
            ENDIF
*D INIBAL.61,73
      DO K=1,IGB
      Z(K)=ZDMP(K)
      D(K)=DDMP(K)
      ENDDO
*D INIBAL.80,107
      DO K=1,IGB
      T(K)=TDMP(K)
      D(K)=DDMP(K)
      ENDDO
      DO K=1,IGA
      SP(K)=SPDMP(K)
      ENDDO
*I INIBAL.112
      ENDIF
*/
*/output to screen to check progress of run
*D MLTRI.155,156
C     PRINT*,'-------------   DAY = ',NINT(DAY)
C     PRINT*,'KOUNT= ',KOUNT
C     PRINT*,'Z(100) = ',Z(100)
C     accumulate monthly means
      KDMP=KDMP+1
      DO I=1,IGB
         ZDMP(I)=ZDMP(I)+Z(I)
         DDMP(I)=DDMP(I)+D(I)
         TDMP(I)=TDMP(I)+T(I)
      ENDDO
      DO I=1,IGA
         SPDMP(I)=SPDMP(I)+SP(I)
      ENDDO
      IF (KDMP.EQ.30) THEN 

      PRINT*,'DAY = ',NINT(DAY),' END OF MONTH ',NINT(DAY)/30
      PRINT*,'KOUNT= ',KOUNT
      DO I=1,IGB
         ZDMP(I)=ZDMP(I)/30.
         DDMP(I)=DDMP(I)/30.
         TDMP(I)=TDMP(I)/30.
      ENDDO
      DO I=1,IGA
         SPDMP(I)=SPDMP(I)/30.
      ENDDO
      PRINT*,'ZDMP100= ',ZDMP(100)
      WRITE(9)RKOUNT,RNTAPE,DAY,ZDMP,DDMP,TDMP,SPDMP,RNTAPE
C     WRITE(9)RKOUNT,RNTAPE,DAY,Z,D,T,SP,RNTAPE

      DO I=1,IGB
         ZDMP(I)=0.
         DDMP(I)=0.
         TDMP(I)=0.
      ENDDO
      DO I=1,IGA
         SPDMP(I)=0.
      ENDDO
      KDMP=0

      END IF
*I MLTRI.201
C     PRINT*,'FINISHED TIMESTEP, KOUNT = ',KOUNT
C     PRINT*,'Z(100) = ',Z(100)
      IF (LMODE.AND.KOUNT.GE.5) CALL SCALEDOWN
*/option to change final restart to final history record 
*/to save disk space in multiple initial condition runs
*/D MLTRI.210
*/      WRITE(12)RKOUNT,RNTAPE,DAY,Z,D,T,SP,RNTAPE
*/
*/changes to vertical scheme
*I INISI.91
C*****redefine G matrix: hard wire hack old T scheme back in 
C*****ONLY VALID FOR equispaced levels and isothermal 
C*****reference temperature - so TAU = AKAP*T0*(G transpose). 

C     DO L=1,NL-1
C     ALPHA(L)=LOG(SIGMA(L+1)/SIGMA(L)) / 2.
C     ENDDO
C     ALPHA(NL)=LOG(1./SIGMA(NL))
C     DO J=2,NL
C     DO I=1,J-1
C     II=J+(I-1)*NL
C     G(II)=ALPHA(J-1)+ALPHA(J)
C     ENDDO
C     ENDDO
C     DO I=1,NL
C     II=I+(I-1)*NL
C     G(II)=ALPHA(I)
C     ENDDO

C     G(1)=0.6017
C     G(7)=0.3510
C     G(13)=0.1737
C     G(19)=0.1122
C     G(25)=0.1276
C     print*,'input G(25) NOW!!'
C     read(*,*)G(25)
*/
*/code modifications to enable model to sweep through training data
*/if LTRAIN is TRUE but not if it is false
*D MLTRI.118
      IF (LTRAIN.NE.1) REWIND 9
C     REWIND 9
*D MLTRI.32
      REWIND 9
      LTRAIN=.FALSE.
      KTRAIN=0

C*****following calls are in place of the pointless routine, INITAL

      CALL INISET
      CALL INIGAU
      CALL INISI

  998 FORMAT(1X,5(1X,F6.4))
      PRINT*,'G MATRIX....'
      PRINT*
      DO III=0,NL2-NL,NL
      WRITE(6,998)(G(III+J),J=1,NL)
      ENDDO
      PRINT*
      PRINT*,'SCALED TAU MATRIX....'
      PRINT*
      DO III=0,NL2-NL,NL
      WRITE(6,998)(TAU(III+J)/T0(1)/AKAP,J=1,NL)
      ENDDO
      PRINT*

      CALL INIRES

  111 CONTINUE

      CALL INISTR(KTRAIN)

      IF (LTRAIN) THEN
      KTRAIN=KTRAIN+1
      PRINT*
      PRINT*,'******************************'
      PRINT*,'MAKING ',KTRAIN,' TH FORECAST'
      PRINT*,'******************************'
      PRINT*
      END IF
*I MLTRI.216
C     IF (LTRAIN.AND.(KTRAIN.LT.1620)) GO TO 111
      IF (LTRAIN.AND.(KTRAIN.LT.900)) GO TO 111
*D INISTR.2     
      SUBROUTINE INISTR(KTRAIN)
*/
*/
*/set up variables for extra spectral transforms
*I MLTRI.22
      DIMENSION DAGUV(2*IGD),DAFUV(2*IGD)
*I MLTRI.23
      EQUIVALENCE (DAGUV(1),UG(1)),(DAFUV(1),FUG(1))
*/
*/maintain global mean surface pressure at initial value
*/and apply diabatic tendency to SP in DSTEP
*D TSTEP.89
      DO 41 I=2,IGA
*D TSTEP.150
      DO 43 I=2,IGA
*D DSTEP.23
      DO 20 I=2,IGA
      SP(I)=SP(I) + DELT2*VP(I)
*/
*I TSTEP.52
C                       D1(L)=RCN*DMI(K)+DELT*(TMPB(L)+GSI1+T0(L)*SPPA
C    1                       +RCN*DT(K)+DELT*(TMPA(L)-T0(L)*VPS))
C     IF (I1.EQ.2) PRINT*,L,D1(L)
*/
*/preset VP to zero and use it as diabatic ln sp tendency then 
*/do an extra set of spectral transforms to calculate diabatic 
*/tendencies in grid space before doing it in spectral space
*/
*I MLTRI.191
         DO 34 I=1,IGA
            VP(I)=0.
   34    CONTINUE

      IF (LGPDAMP) THEN

      IF (JGL.EQ.1) REWIND 25
      JL=1

C     Main loop over latitudes

      DO 105 IH=1,JG
         JH=IH
         IF(JGL.EQ.1) READ(25) ALP,DALP,RLP,RDLP

C        Go from spectral space to grid point space using
C        inverse Legendre and Fourier transforms

         CALL LTIUV

         NFT=2*NL
         NTR=NFT*NHEM
         NT=(NTR-1)/NCRAY
         NRST=NTR-NCRAY*NT

         DO 110 I=1,NT
            CALL FFT991(DAGUV(1+(I-1)*NCRAY*MGPP),WORK,TRIG,IFAX,1
     &                 ,MGPP,MG,NCRAY,1)
 110     CONTINUE
         CALL FFT991(DAGUV(1+ NT*NCRAY*MGPP),WORK,TRIG,IFAX,1
     &              ,MGPP,MG,NRST,1)
 
C        Calculate nonlinear terms

         CALL DGRMLT

C        Go from grid point space to spectral space using
C        direct Legendre and Fourier transforms

         DO 120 I=1,NT
            CALL FFT991(DAFUV(1+(I-1)*NCRAY*MGPP),WORK,TRIG,IFAX,1
     &                 ,MGPP,MG,NCRAY,-1)
 120     CONTINUE
         CALL FFT991(DAFUV(1+ NT*NCRAY*MGPP),WORK,TRIG,IFAX,1
     &              ,MGPP,MG,NRST,-1)

         CALL LTDUV

         JL=JL+JINC
 105  CONTINUE

C     Make sure grid point damping hasn't given any global mean 
C     tendency to Z and D

      DO 35 K=1,NL
         I=IGA*(K-1)+1
         II=I+NWJ2
         ZT(II)=0.0
         DT(I)=0.0
   35 CONTINUE

      END IF
C
*/
*/set up some extra fields for reading in forcing data
*/and parameters to do with grid point damping
*I RESTOR.5
     &,ZFCE(IGB),DFCE(IGB),TFCE(IGB),SPFCE(IGA)
     &,ZFED(IGB),DFED(IGB),TFED(IGB),SPFED(IGA)
     &,ZFAN(IGB),DFAN(IGB),TFAN(IGB),SPFAN(IGA)
     &,ZDMP(IGB),DDMP(IGB),TDMP(IGB),SPDMP(IGA)
     &,ZDMI(IGB),DDMI(IGB),TDMI(IGB),SPDMI(IGA)
     &,MASK(IGC,JG),GG(IGC,JG),CD(IGC,JG),AA1,AA2,AAT
      COMPLEX ZFCE,DFCE,TFCE,SPFCE,ZFED,DFED,TFED,SPFED
     &,ZFAN,DFAN,TFAN,SPFAN
     &,ZDMP,DDMP,TDMP,SPDMP,ZDMI,DDMI,TDMI,SPDMI
*/
*/change the way force/damp/restoration is read
*D MLTRI.54,56
*D INISTR.214,217
C     IF (KTRAIN.EQ.0) THEN
         IF (LMODE) THEN
            REWIND(10)
            READ(10)RKTMP,RMTMP,DTMP,ZDMI,DDMI,TDMI,SPDMI,RLTMP
            REWIND(17)
            READ(17)ZDMP,DDMP,TDMP,SPDMP
C*****(DMP fields are from 1 tstp integration of unforced model)
         END IF
         IF (LFCE) THEN
            REWIND(13)
            READ(13)ZFCE,DFCE,TFCE,SPFCE
         END IF
         IF (LFED) THEN
            REWIND(14)
            READ(14)ZFED,DFED,TFED,SPFED
C           IF (LLIN) THEN
C              DO I=1,IGB
C              ZFED(I)=ZFED(I)/1.E4
C              DFED(I)=DFED(I)/1.E4
C              TFED(I)=TFED(I)/1.E4
C              ENDDO
C              DO I=1,IGA
C              SPFED(I)=SPFED(I)/1.E4
C              ENDDO
C           ENDIF
         END IF
         IF (LFAN) THEN
            REWIND(15)
            READ(15)ZFAN,DFAN,TFAN,SPFAN
            IF (LLIN) THEN
               DO I=1,IGB
               ZFAN(I)=ZFAN(I)/1.E4
               DFAN(I)=DFAN(I)/1.E4
               TFAN(I)=TFAN(I)/1.E4
               ENDDO
               DO I=1,IGA
               SPFAN(I)=SPFAN(I)/1.E4
               ENDDO
            ENDIF
         END IF
C     END IF
*/read in grid point fields and calculate drag
*I INISTR.14
*CALL LEGAU
*I INISTR.45
C     initialise grid point fields to zero and read if required
C
      IF (KTRAIN.EQ.0) THEN

      DO J=1,JG
      DO I=1,IGC
         GG(I,J)=0
         MASK(I,J)=0
      ENDDO
      ENDDO

      READ(18)GG
      READ(19)MASK

C     work out area averages of terms in drag coeff for normalization

      RMASKAVE=0.
      FHAVE=0.
      CSAVE=0.
      DO J=1,JG
      DO IHEM=1,NHEM
      DO II=1,MG
         I=II+(IHEM-1)*MGPP
         RMASKAVE=RMASKAVE+REAL(MASK(I,J))*CS(J)/REAL(NHEM*MG*JG)
         FH=MASK(I,J)*(1.-EXP(-GG(I,J)/1000.))
         FHAVE=FHAVE+FH*CS(J)/REAL(NHEM*MG*JG)
      ENDDO
      ENDDO
         CSAVE=CSAVE+CS(J)/REAL(JG)
      ENDDO
      RMASKAVE=RMASKAVE/CSAVE
      FHAVE=FHAVE/CSAVE

      PRINT*,'AREA MEAN OF LAND SEA MASK IS = ',RMASKAVE
      PRINT*,'AREA MEAN OF OROGRAPHIC DRAG FUNCTION IS = ',FHAVE

C     define a normalized drag coefficient that makes standard drag 
C     a function of land/sea and orography with area average 1.

      DO J=1,JG
      DO I=1,IGC
         FH=MASK(I,J)*(1.-EXP(-GG(I,J)/1000.))
         CD(I,J)=(1. + AA1*REAL(MASK(I,J)) + AA2*FH)
     &           /(1. + AA1*RMASKAVE + AA2*FHAVE)
      ENDDO
      ENDDO

      END IF
C
*/include forcing on spectral coeficients and linear damping
*/Also add optional modefinder code for 3d normal mode work.
*/
*D DIFUSE.15,55

C*****FORCING

      IF (LFCE) THEN
      DO 40 I=1,IGB
      ZT(I)=ZT(I) + ZFCE(I)
      DT(I)=DT(I) + DFCE(I)
      TT(I)=TT(I) + TFCE(I)
   40 CONTINUE
      DO 41 I=1,IGA
      VP(I)=VP(I) + SPFCE(I)
   41 CONTINUE
      END IF

      IF ((LMODE).AND.(KOUNT.EQ.1)) THEN
      PRINT*,'PERTURBING SFCE PRESSURE'
      DO I=1,IGA
      VP(I)=VP(I) + SPFCE(I)/100.
      ENDDO
      END IF

      IF (LFED) THEN
      DO 42 I=1,IGB
      ZT(I)=ZT(I) - ZFED(I)
      DT(I)=DT(I) - DFED(I)
      TT(I)=TT(I) - TFED(I)
   42 CONTINUE
      DO 43 I=1,IGA
      VP(I)=VP(I) - SPFED(I)
   43 CONTINUE
      END IF

CHACK**turn heating off after a day
C     IF (KOUNT.GT.24) LFAN=.FALSE.
      IF (LFAN) THEN
      DO 44 I=1,IGB
C     ZT(I)=ZT(I) + ZFAN(I)
C     DT(I)=DT(I) + DFAN(I)
C     TT(I)=TT(I) + TFAN(I)
   44 CONTINUE
      DO 45 I=1,IGA
C     VP(I)=VP(I) + SPFAN(I)
   45 CONTINUE

C*****calculate red noise random number
C*****once per day
      IF (ABS(REAL(KOUNT-1)/24.-REAL((KOUNT-1)/24)).LT.1.E-5) THEN
      XWHITE=0.
      ICLMT=100
      IDECORR=30
      RNORMALIZE=3.9

      DO I=1,ICLMT
      XFLAT=2.*(RAND() - 0.5)
      XWHITE=XFLAT+XWHITE
      ENDDO
      XWHITE=XWHITE * SQRT(3./REAL(ICLMT)) / RNORMALIZE

      FACTOR=1. - 1./REAL(IDECORR)
      XRED=XWHITE + FACTOR*XRED
      END IF

C*****forcing anomaly: one coeff of temperature
      DO I=1,NL
      II=IGA*(I-1) + 2
      TT(II)=TT(II) + 0.2/86400. / CT / WW * XRED
      ENDDO

      END IF

      IF(DAMP.GT.0.0) THEN

C*****DAMPING

C*****stratosphere
      DO 51 I=1,IGA
C     ZT(I)=ZT(I) - DAMP*Z(I)*0.05
C     DT(I)=DT(I) - DAMP*D(I)*0.05
      TT(I)=TT(I) - DAMP*T(I)*0.15
   51 CONTINUE

C*****troposphere
      DO 52 I=IGA+1,(NL-1)*IGA
C     ZT(I)=ZT(I) - DAMP*Z(I)*0.05
C     DT(I)=DT(I) - DAMP*D(I)*0.05
      TT(I)=TT(I) - DAMP*T(I)*0.15
   52 CONTINUE

C*****boundary layer
      IF (LGPDAMP.NE.1) THEN
      DO 53 I=(NL-1)*IGA+1,IGB
      ZT(I)=ZT(I) - DAMP*Z(I)
      DT(I)=DT(I) - DAMP*D(I)
   53 CONTINUE
      END IF

      DO 54 I=(NL-1)*IGA+1,IGB
      TT(I)=TT(I) - DAMP*T(I)*AAT
   54 CONTINUE

C*****remove damping from planetary vorticity !
C*****stratosphere
      K=1
      I=(K-1)*IGA + 1
C     ZT(I)=ZT(I) + DAMP*EZ*0.05

C*****troposphere
      DO 61 K=2,NL-1
      I=(K-1)*IGA + 1
C     ZT(I)=ZT(I) + DAMP*EZ*0.05
   61 CONTINUE

C*****boundary layer
      I=(NL-1)*IGA + 1
      IF (LGPDAMP.NE.1) ZT(I)=ZT(I) + DAMP*EZ

C*****optional extra damping on everything to stabilize model 
C     without changing its modal structure
C     STAB=0.2
C     DO I=1,IGB
C     ZT(I)=ZT(I) - DAMP*Z(I) *STAB
C     DT(I)=DT(I) - DAMP*D(I) *STAB
C     TT(I)=TT(I) - DAMP*T(I) *STAB
C     ENDDO
C     DO I=1,IGA
C     VP(I)=VP(I) - DAMP*SP(I) *STAB
C     ENDDO

      ENDIF
*/
*/
*DECK SCALEDOWN
      SUBROUTINE SCALEDOWN

C     Scales perturbation about climatology (ZDMP etc) if it 
C     gets outside decadal bounds in a norm based on sum of 
C     squares of level 6 vorticity perturbations

*CALL PARAM1
*CALL PARAM2
*CALL BLANK
*CALL SPECTR
*CALL BATS
*CALL RESTOR

      RNORM=0.
      DO I=5*IGA+1,6*IGA
      RNORM=RNORM+(ABS(Z(I)-ZDMP(I)))**2.
      ENDDO
      RNORM=SQRT(RNORM)

      RNORM0=1.E-5
      RATIO=RNORM/RNORM0
      PRINT*,' RATIO= ',RATIO,' RNORM= ',RNORM

      IF ((RATIO.GT.10.).OR.(RATIO.LT.0.1)) THEN
      PRINT*,'RNORM= ',RNORM,' RATIO= ',RATIO,' ADJUSTING ANOM'

      DO I=1,IGB
      Z(I)=(Z(I)-ZDMP(I))/RATIO + ZDMP(I)
      D(I)=(D(I)-DDMP(I))/RATIO + DDMP(I)
      T(I)=(T(I)-TDMP(I))/RATIO + TDMP(I)
      ZMI(I)=(ZMI(I)-ZDMI(I))/RATIO + ZDMI(I)
      DMI(I)=(DMI(I)-DDMI(I))/RATIO + DDMI(I)
      TMI(I)=(TMI(I)-TDMI(I))/RATIO + TDMI(I)
      ENDDO
      DO I=1, IGA
      SP(I)=(SP(I)-SPDMP(I))/RATIO + SPDMP(I)
      SPMI(I)=(SPMI(I)-SPDMI(I))/RATIO + SPDMI(I)
      ENDDO
      ENDIF

      RETURN
      END

*DECK LTIUV
      SUBROUTINE LTIUV

C     Inverse Legendre transform for the diabatic part of the timestep.
C     Transforms from spectral to Fourier space at the current latitude
C     (pair).  In a global run the resulting arrays are complete
C     (i.e. even+odd) Fourier coefficients at the northern & southern
C     hemisphere rows.
C
C     Calls the modular routine HEXP to transform U and V fields.

*CALL PARAM1
*CALL PARAM2
*CALL BLANK
*CALL GRIDP3
*CALL LEGAU
*CALL POLYNO
*CALL SPECTR

C     Preset Fourier arrays.

      DO 10 L=1,NL
         DO 10 I=1,IGL
            CHIG(I,L)=0.
            SFG(I,L)=0.
            UG(I,L)=0.
            VG(I,L)=0.
   10 CONTINUE

C     Remove planetary vorticity in spectral space, so all transforms
C     use relative vorticity.

      DO 30 I=1,IGB,IGA
         Z(I)=Z(I)-EZ
   30 CONTINUE

C        Wind components: calls to HEXP give following Fourier fields:
C           SFG  :   streamfunction.
C           CHIG :   velocity potential.
C           UG   :   -U(rotational).
C           VG   :   V(divergent).

         CALL HEXP(Z,SFG ,NL,5)
         CALL HEXP(D,CHIG,NL,6)
         CALL HEXP(Z,UG  ,NL,7)
         CALL HEXP(D,VG  ,NL,8)

C     Restore planetary vorticity in spectral space.

      DO 40 I=1,IGB,IGA
         Z(I)=Z(I)+EZ
   40 CONTINUE

C     Sum to give total winds.  CMPA takes x-derivative.

      DO 60 L=1,NL
         DO 60 I=1,IGL
            UG(I,L)=CMPA(I)*CHIG(I,L)-UG(I,L)
            VG(I,L)=CMPA(I)* SFG(I,L)+VG(I,L)
   60 CONTINUE

      RETURN
      END
*/
*/
*DECK LTDUV
      SUBROUTINE LTDUV

C     Direct Legendre transform for the diabatic part of the timestep.
C     Transforms from Fourier to spectral space at the current latitude
C     (pair).  In a global run the input arrays are complete (even+odd)
C     Fourier coefficients at the northern & southern hemisphere rows.
C
C     Calls the modular routine HANAL for tendencies of U and V to
C     give grid point contributions to ZT and DT.
C
C     The Fourier work array passed to HANAL must be dimensioned with
C     (at least) the maximum number of levels used in the HANAL calls.

*CALL PARAM1
*CALL PARAM2
*CALL BLANK
*CALL GRIDP3
*CALL LEGAU
*CALL POLYNO
*CALL SPECTR

      COMPLEX GWORK(IGL,NL)

C     Prepare Fourier arrays:
C     - change sign of terms which contribute negatively to tendency,
C     - apply (1-mu**2) weighting,
C     - take zonal derivatives,
C     - make copies of effective momentum tendencies.

      DO 10 L=1,NL
         DO 10 I=1,IGL
            FVGT(I,L)=FVG(I,L)
            FUGT(I,L)=-FUG(I,L)
            FUG(I,L)=CMPA(I)*FUG(I,L)/CSSQ(JH)
            FVG(I,L)=CMPA(I)*FVG(I,L)/CSSQ(JH)
   10 CONTINUE

C     legendre transfroms to give ZT and DT

         CALL HANAL(FVG,GWORK,ZT,NL,1)
         CALL HANAL(FUGT,GWORK,ZT,NL,3)
         CALL HANAL(FUG,GWORK,DT,NL,2)
         CALL HANAL(FVGT,GWORK,DT,NL,4)

      RETURN
      END
*/
*/
*DECK DGRMLT
      SUBROUTINE DGRMLT

C     Computes nonlinear tendencies in grid point space
C     for the present latitude

*CALL PARAM1
*CALL PARAM2
*CALL BLANK
*CALL LEGAU
*CALL GRIDP2
*CALL RESTOR

      WSC=10./WW/RADEA
      IOFM=0
      DO 800 IHEM=1,NHEM
         DO 160 L=1,NL

            IF (L.LT.NL) THEN
               DO 210 I=1,MG
                  J=I+IOFM
                  FUG(J,L)=0.
                  FVG(J,L)=0.
 210           CONTINUE
            ELSE
               DO 220 I=1,MG
                  J=I+IOFM

C*****linear drag, just a function of terrain
                  FUG(J,L)= -DAMP*UG(J,L) *CD(J,JH)
                  FVG(J,L)= -DAMP*VG(J,L) *CD(J,JH)

C*****OR nonlinear drag: same as linear for wind speed = WSC
C     WSSQ=(UG(J,L)*UG(J,L)+VG(J,L)*VG(J,L))/CS(JH)/CS(JH)
C     WS=SQRT(WSSQ)
C     DRAG=DAMP  *CD(J,JH) *(WS/2. + WSSQ/2./WSC)
C     FUG(J,L)= -DRAG * UG(J,L)/WS
C     FVG(J,L)= -DRAG * VG(J,L)/WS

 220           CONTINUE
            ENDIF

 160     CONTINUE
         IOFM=MGPP
 800  CONTINUE

      RETURN
      END
*/
*/
/EOF
#
############################################# NAMELIST DATA.
#
# quick reminder of logic:
# if NOT LRSTRT - initial run, balancing (LBALAN) or all arrays zero. 
# if LRSTRT then: 
#  if LSHORT - read history (avoid short tsteps by setting KITS=0). 
#  if NOT LSHORT - read restart 
#
cat  <<  /EOF  >  data
 &INPPL
 &END
 &INPRN KRUN=23688000,BEGDAY=0.,KITS=0,TSPD=24.,PNU=0.01
 TDISS=1.0,NDEL=8,
 LSHORT=.T.,
 LBALAN=.F.
 LRSTRT=.T.,
 LRESTIJ=.F.,
 LNOISE=.F.,
 LGPDAMP=.F.
 LFCE=.T.
 LFED=.T.
 LFAN=.T.
 LLIN=.F.
 LMODE=.F.
 LTRAIN=.F.
 &END
 &INPOP RNTAPE=100.,KOUNTH=24,KOUNTR=216000,
 KOUNTE=0,NLAT=16,
 LSPO=5*.F.,LGPO=5*.F.
 &END
 &INPRS RESTIM=1.0,AA1=1.0,AA2=1.0,AAT=0.5
 &END
 &INPRSIJ
 &END
 &INPBL 
 KBAL=5,LTBAL=.T.
 &END
/EOF
#
############################################# ERROR PROCESSING FUNCTION.
#
ABORT ()
{
echo '!!!!!!!!!! ERROR PROCESSING !!!!!!!!!!'
set +e
#[ $1 = EXECUTE ]  &&  cat fort.2            # List output.
#[ $1 = EXECUTE ]  &&  debug -B -s $EXEC
#\rm data updates igcm1.f fort.* prog
exit 1
}
#
############################################# COMPILE AND RUN PROGRAM.
#
if [ $COMPILE = yes ]
then
    nupdate  -p $KD/igcm1.npl  -c igcm1     \
             -i updates                     \
             -f  -w 72  -o sq       ||  ABORT NUPDATE
if [ $MACHINE = sun ] 
then
    fflags='-O3 -fast -r8 -f -w '
fi
if [ $MACHINE = sgi ] 
then
    fflags='-O3 -static -r8'
fi
    f77  $fflags -o $EXEC igcm1.f -L $KD/lib \
      -l$MACHINE'fft1' -l$MACHINE'blas1' -l$MACHINE'util1' || ABORT f77
#rm igcm1.f
fi

#
if [ $RUN = yes ]
then
    ln  -s data  fort.7
#   ln  -s $EXPDIR/restart.11.9000d.11-18.R0.5  fort.10
    ln  -s $KD2/data.ave  fort.10
#   ln  -s $KD2/data.rest250K  fort.10
    ln  -s $KD2/data.fli  fort.13
    ln  -s $KD2/data.fed  fort.14
    ln  -s $KD2/data.fan  fort.15
    ln  -s $KD/data/MG64JG16.orog.b  fort.18
    ln  -s $KD/data/MG64JG16.mask.b  fort.19
#
    ln  -s $EXPDIR/history  fort.9
    ln  -s $EXPDIR/restart.11  fort.11
    ln  -s $EXPDIR/restart.12  fort.12
    ln  -s $EXPDIR/results  fort.2
#
    $EXEC                        ||  ABORT EXECUTE
    set +e                                  # Disable exit on error.
#    cat fort.2                             
    ls -alF    $EXPDIR                      # List files.
#   \rm data fort.* 
fi
exit 0                                      # Successful termination.
done
#
############################################# ERROR PROCESSING.
#
set +e                                      # Disable exit on error.
#cat fort.2                                  # List output.
#debug  -B  -s prog                          # Debug.
exit 1                                      # Abort.
#
############################################# END OF JOB.

